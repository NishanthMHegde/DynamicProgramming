0,1,1,2,3,5,8,13...

The base cases are 0 and 1 as every series starts with 0 and 1.
If we analyse carefully, then we can see that each number is the sum or previous 2 numbers.

So we can compute the function,

F(N) = F(n-1) + F(n-2)

Instead of using recursion and increasing the computational costs, we can just store these values in an array.

DP solution:

int fibo[N+1]; //n+1 because there is no 0th fibonacci number
fibo[0] = 0;
fibo[1] = 1;

for i=2 to N-1:
	fibo[i] = fibo[i-1] + fibo[i-2]

return fibo[N=1];
