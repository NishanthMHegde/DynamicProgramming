Problem: Consider an M*N matrix or grid. You are present in the top left corner/ cell of the matrix and your home is present in the bottom right corner of the matrix. Find out the total number of ways that you can take to reach your home. 


Observations:
We can either move one step right or one step down.
If we are present in any cell on the rightmost side of the matrix, then we can only move down.
If we are present in any cell on the bottom most side of the matrix, then we can only move right.

Sub-problems:

The total number of ways we can reach home from one particular cell is equal to the number of ways we can move from the cell present on its right to home plus the number of ways we can move from the cell present below it to home. 


Pseudocode:

int cell[m][n];

//initialize values of all cells on rightmost side and bottmost side to 1 as there is only one way to reach home from rightmost and bottommost side. 

for i=0 to m-1:
	cell[i][n-1] = 1

for i = 0 to n-1:
	cell[m-1][i] = 1

//The total number of ways we can reach home from one particular cell is equal to the number of ways we can move from the cell present on //its right to home plus the number of ways we can move from the cell present below it to home. 

for i=m-2 down to 0:
	for j = n-2 down to 0:
		cell[i][j] = cell[i+1][j] + cell[i][j+1]

return cell[0][0]

After the program finishes execution, cell[0][0] will have the number of ways to reach home from any point on the matrix to home. 