Problem: Given an array of integers, find out the longest possible length of series where the numbers are in ascending order. The numbers can be consecutive or non-consecutive (sub-sequence).

Example:
Consider the below array:

10 13 11 20 37 80 50

In the above example, the longest increasing subsequence would be 10 13 20 37 80 which has a length of 5. 

Solution:

We know that at each position in the array, the longest increasing subsequence is at least of length 1. 
We need to find the length of longest subsequence found at each array index and increment it by one if we find that the current
number we are on is greater than the number we are scanning and the LIS at the current number is less than the currently scanned number.

Let us maintain an LIS array of length n.
LIS[0] is always 1.
Initialize all indices of LIS to 1.

When i=1 and j=0, we see that 13 > 10 and also LIS[1] < LIS[0] + 1. This means we have found an increasing sub sequence and hence
LIS[1] = LIS[1] + 1

Now, i=2 and j=0,
11 > 10 and also LIS[2] < LIS[0] +1,
so LIS[2] = LIS[2] + 1

Now i=2, j=1,
11 !>13, so we move on

Now i=3 and j=0,
20 > 10 and also LIS[3] < LIS[0] + 1,
LIS[3] = LIS[3] + 1
i=3, j=1,
20 > 13 and also LIS[3] < LIS[1] + 1
LIS[3] = LIS[3] + 1

i=3, j=2,
20 > 11 but LIS[3] > LIS[2] + 1, so we move on,

i=4, j=0
37 > 10 and also LIS[4] < LIS[0] + 1,
so LIS[4] = LIS[4] + 1

i=4, j=1,
37 > 13 and also LIS[4] < LIS[1] + 1,
so LIS[4] = LIS[4] + 1

i=4, j=2,
37 > 11 but LIS[4] !< LIS[2] + 1,
so we move on

i=4, j=3,
37 > 20 and also LIS[4] < LIS[3] + 1,
so LIS[4] = LIS[4] + 1

Now, i=5 and j=0,
80 > 10 and LIS[5] < LIS[0] + 1,
So LIS[5] = LIS[5] + 1

i=5 and j=1,
80 > 13 and LIS[5] < LIS[1] + 1,
So LIS[5] = LIS[5] + 1

i=5 and j=2,
80 > 11 but LIS[5] !< LIS[2] + 1,
so we move on

i=5 and j=3,
80 > 20 and LIS[5] < LIS[3] + 1,
So LIS[5] = LIS[5] + 1

i=5 and j=4,
80 > 37 and LIS[5] < LIS[4] + 1,
So LIS[5] = LIS[5] + 1

Now, we have i=6 and j=0,
50 > 10 and LIS[6] < LIS[0] + 1,
so LIS[6] = LIS[6] + 1

i=6 and j=1,
50 > 13 and LIS[6] < LIS[1] + 1,
so LIS[6] = LIS[6] + 1

i=6 and j=2,
50 > 11 but LIS[6] !< LIS[2] + 1,
so we move on

i=6 and j=3,
50 > 20 and LIS[6] < LIS[3] + 1,
so LIS[6] = LIS[6] + 1

i=6 and j=4,
50 > 37 and LIS[6] < LIS[4] + 1,
so LIS[6] = LIS[6] + 1

i=6 and j=0,
50 >!> 80, so we stop

Now our LIS array looks like this:
LIS[] = [1, 2, 1, 3, 4,5, 1 ]

The max value in the array is 5, so our longest increasing subsequence is 5. 


Pseudodode:

func find_lis(arr[]):

	n = arr.size
	int LIS[n];
	int length_of_lis = 1;
	//initialize all LIS to 1
	for i=0 to n:
		LIS[i] = 1;

	for i =1 to n:
		for j=0 to i:
			if (arr[i] > arr[j]) and (LIS[i] < LIS[j] + 1):
				LIS[i] = LIS[i] + 1
			else:
				continue

	length_of_lis = max(LIS)
	return length_of_lis;